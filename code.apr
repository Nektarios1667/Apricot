include math;
import functions;

type hashtag:
    if isinstance(value, str):
        return value[0] == '#';
    else:
        return false;

hashtag: myHashtag = "#tag";

// Constant definition
const: PI = 3.1415926;

// Class
class improvedString inherits str:
    func improvedString(str: val): // Initialization function
        this.value = val;

    // Method
    func null setChar(str: char, int: idx):
        this.value = this.value[:idx] + char[0] + this.value[idx + 1:];


// Function
func int factorial(int: value):
    int: product = 1;
    // For loop
    for num in (2..value+1):
        product = product * num;

    return product;

// Function call
log(factorial(10));

// Object
improvedString: imprStr = improvedString("test");
// Method calling
imprStr.setChar('_', 0);
// Property
log(imprStr.value);

// While loop
int: n = 0;
while n**2 < 100:
    n += 1;

// Try-catch
try:
    // Type casting
    int: age = <int 'thirty four'>;
catch:
    log('Value not a number.');

// Function references
Function: fact = factorial;
log(fact(2));

// Library
log(functions.multiAdd(1, 2, 3));

// Implicit typing
var: number = 0;
// Pointers
Pointer: point = @number;
number = number + 1;
log(^point);

// Const
log(PI);

